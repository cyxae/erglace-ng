// Generated by kalamine on 2025-05-09
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : ergl-ng.xkb_symbols
// Project page  : https://github.com/cyxae/erglace-ng
// Author        : cyxae
// Version       : 0.7.0
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Erglace-ng)
//
// Base layer + dead key
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆ ~   ┃ € ‚ │ « ‘ │ » ’ │ $   │ %   ┃ ^   │ &   │ *   │ #   │ @   ┃ _ – ┆ + ± ┆
// ┆ `   ┃ 1 „ │ 2 “ │ 3 ” │ 4 ¢ │ 5 ‰ ┃ 6   │ 7   │ 8 § │ 9 ¶ │ 0 ° ┃ / ÷ ┆ = ≠ ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ Q   │ C   │ L   │ P   │ W   ┃ K   │ F   │ O   │ ! ¡ │ J   ┃ {   ┆ }   ┆
//       ┃     │   ç │   ñ │     │     ┃   ù │   è │   ô │***¨ │   â ┃ [   ┆ ]   ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ R   │ S _ │ N   │ T   │ G   ┃ ;   │ U   │ E   │ I   │ A   ┃ "   ┆ |   ┆
//       ┃   œ │   _ │   î │   à │  *µ ┃ , û │   é │   ê │   ï │   æ ┃ '   ┆ \   ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆ >   ┃ X   │ V   │ M   │ D • │ B   ┃ Z   │ H   │ ? ¿ │ Y   │ :   ┃
// ┆ <   ┃     │   ß │   µ │   · │   … ┃   — │   – │ - ‑ │     │ .   ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚
//
// AltGr layer
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
// ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃     ┆     ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃  *^ │     │     │  *¤ │   ‰ ┃  *˚ │     │   × │  *´ │  *` ┃     ┆     ┆
//       ┃   ^ │   < │   > │   $ │   % ┃   @ │   & │   * │   ' │   ` ┃     ┆     ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃  *ˇ │     │     │  *˙ │   ≠ ┃  */ │   ± │  *¯ │   ÷ │  *” ┃     ┆     ┆
//       ┃   { │   ( │   ) │   } │   = ┃   \ │   + │   - │   / │   " ┃     ┆     ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆     ┃  *~ │  *, │  *˛ │   – │     ┃     │   ¬ │  *¸ │   : │  *˘ ┃
// ┆     ┃   ~ │   [ │   ] │   _ │   # ┃   | │   ! │   ; │   : │   ? ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

partial alphanumeric_keys modifier_keys
xkb_symbols "erglace-ng" {
    name[group1]= "French (Erglace-ng)";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , EuroSign        , U2081           , onesuperior     , U201E           , U201A           ]}; // 1 € ₁ ¹ „ ‚
    key <AE02> {[ 2               , guillemotleft   , U2082           , twosuperior     , U201C           , U2018           ]}; // 2 « ₂ ² “ ‘
    key <AE03> {[ 3               , guillemotright  , U2083           , threesuperior   , U201D           , U2019           ]}; // 3 » ₃ ³ ” ’
    key <AE04> {[ 4               , dollar          , U2084           , U2074           , cent            , VoidSymbol      ]}; // 4 $ ₄ ⁴ ¢
    key <AE05> {[ 5               , percent         , U2085           , U2075           , U2030           , VoidSymbol      ]}; // 5 % ₅ ⁵ ‰
    key <AE06> {[ 6               , asciicircum     , U2086           , U2076           , VoidSymbol      , VoidSymbol      ]}; // 6 ^ ₆ ⁶
    key <AE07> {[ 7               , ampersand       , U2087           , U2077           , VoidSymbol      , VoidSymbol      ]}; // 7 & ₇ ⁷
    key <AE08> {[ 8               , asterisk        , U2088           , U2078           , section         , VoidSymbol      ]}; // 8 * ₈ ⁸ §
    key <AE09> {[ 9               , numbersign      , U2089           , U2079           , paragraph       , VoidSymbol      ]}; // 9 # ₉ ⁹ ¶
    key <AE10> {[ 0               , at              , U2080           , U2070           , degree          , VoidSymbol      ]}; // 0 @ ₀ ⁰ °

    // Letters, first row
    key <AD01> {[ q               , Q               , asciicircum     , dead_circumflex , VoidSymbol      , VoidSymbol      ]}; // q Q ^ ^
    key <AD02> {[ c               , C               , less            , lessthanequal   , ccedilla        , Ccedilla        ]}; // c C < ≤ ç Ç
    key <AD03> {[ l               , L               , greater         , greaterthanequal, ntilde          , Ntilde          ]}; // l L > ≥ ñ Ñ
    key <AD04> {[ p               , P               , dollar          , dead_currency   , VoidSymbol      , VoidSymbol      ]}; // p P $ ¤
    key <AD05> {[ w               , W               , percent         , U2030           , VoidSymbol      , VoidSymbol      ]}; // w W % ‰
    key <AD06> {[ k               , K               , at              , dead_abovering  , ugrave          , Ugrave          ]}; // k K @ ˚ ù Ù
    key <AD07> {[ f               , F               , ampersand       , VoidSymbol      , egrave          , Egrave          ]}; // f F &   è È
    key <AD08> {[ o               , O               , asterisk        , multiply        , ocircumflex     , Ocircumflex     ]}; // o O * × ô Ô
    key <AD09> {[ ISO_Level5_Latch, exclam          , apostrophe      , dead_acute      , dead_diaeresis  , exclamdown      ]}; // *¨ ! ' ´ ¨ ¡
    key <AD10> {[ j               , J               , grave           , dead_grave      , acircumflex     , Acircumflex     ]}; // j J ` ` â Â

    // Letters, second row
    key <AC01> {[ r               , R               , braceleft       , dead_caron      , oe              , OE              ]}; // r R { ˇ œ Œ
    key <AC02> {[ s               , S               , parenleft       , VoidSymbol      , underscore      , underscore      ]}; // s S (   _ _
    key <AC03> {[ n               , N               , parenright      , VoidSymbol      , icircumflex     , Icircumflex     ]}; // n N )   î Î
    key <AC04> {[ t               , T               , braceright      , dead_abovedot   , agrave          , Agrave          ]}; // t T } ˙ à À
    key <AC05> {[ g               , G               , equal           , notequal        , dead_greek      , VoidSymbol      ]}; // g G = ≠ µ
    key <AC06> {[ comma           , semicolon       , backslash       , dead_stroke     , ucircumflex     , Ucircumflex     ]}; // , ; \ / û Û
    key <AC07> {[ u               , U               , plus            , plusminus       , eacute          , Eacute          ]}; // u U + ± é É
    key <AC08> {[ e               , E               , minus           , dead_macron     , ecircumflex     , Ecircumflex     ]}; // e E - ˉ ê Ê
    key <AC09> {[ i               , I               , slash           , division        , idiaeresis      , Idiaeresis      ]}; // i I / ÷ ï Ï
    key <AC10> {[ a               , A               , quotedbl        , dead_doubleacute, ae              , AE              ]}; // a A " ˝ æ Æ

    // Letters, third row
    key <AB01> {[ x               , X               , asciitilde      , dead_tilde      , VoidSymbol      , VoidSymbol      ]}; // x X ~ ~
    key <AB02> {[ v               , V               , bracketleft     , dead_belowcomma , ssharp          , U1E9E           ]}; // v V [ , ß ẞ
    key <AB03> {[ m               , M               , bracketright    , dead_ogonek     , mu              , VoidSymbol      ]}; // m M ] ˛ µ
    key <AB04> {[ d               , D               , underscore      , endash          , periodcentered  , U2022           ]}; // d D _ – · •
    key <AB05> {[ b               , B               , numbersign      , VoidSymbol      , ellipsis        , VoidSymbol      ]}; // b B #   …
    key <AB06> {[ z               , Z               , bar             , brokenbar       , emdash          , VoidSymbol      ]}; // z Z | ¦ —
    key <AB07> {[ h               , H               , exclam          , notsign         , endash          , VoidSymbol      ]}; // h H ! ¬ –
    key <AB08> {[ minus           , question        , semicolon       , dead_cedilla    , U2011           , questiondown    ]}; // - ? ; ¸ ‑ ¿
    key <AB09> {[ y               , Y               , colon           , colon           , VoidSymbol      , VoidSymbol      ]}; // y Y : :
    key <AB10> {[ period          , colon           , question        , dead_breve      , VoidSymbol      , VoidSymbol      ]}; // . : ? ˘

    // Pinky keys
    key <AE11> {[ slash           , underscore      , VoidSymbol      , VoidSymbol      , division        , endash          ]}; // / _     ÷ –
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      , notequal        , plusminus       ]}; // = +     ≠ ±
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , U202F           , space           , nobreakspace    , U2019           , U2019           ]}; //         ’ ’

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
